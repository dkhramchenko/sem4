#include <iostream>

using namespace std;

double det(double** a) //функция выисляющая определитель для матрицы 4*4
{
	return a[0][3] * a[1][2] * a[2][1] * a[3][0] - a[0][2] * a[1][3] * a[2][1] * a[3][0] - a[0][3] * a[1][1] * a[2][2] * a[3][0] +
		a[0][1] * a[1][3] * a[2][2] * a[3][0] + a[0][2] * a[1][1] * a[2][3] * a[3][0] - a[0][1] * a[1][2] * a[2][3] * a[3][0] -
		a[0][3] * a[1][2] * a[2][0] * a[3][1] + a[0][2] * a[1][3] * a[2][0] * a[3][1] + a[0][3] * a[1][0] * a[2][2] * a[3][1] -
		a[0][0] * a[1][3] * a[2][2] * a[3][1] - a[0][2] * a[1][0] * a[2][3] * a[3][1] + a[0][0] * a[1][2] * a[2][3] * a[3][1] +
		a[0][3] * a[1][1] * a[2][0] * a[3][2] - a[0][1] * a[1][3] * a[2][0] * a[3][2] - a[0][3] * a[1][0] * a[2][1] * a[3][2] +
		a[0][0] * a[1][3] * a[2][1] * a[3][2] + a[0][1] * a[1][0] * a[2][3] * a[3][2] - a[0][0] * a[1][1] * a[2][3] * a[3][2] -
		a[0][2] * a[1][1] * a[2][0] * a[3][3] + a[0][1] * a[1][2] * a[2][0] * a[3][3] + a[0][2] * a[1][0] * a[2][1] * a[3][3] -
		a[0][0] * a[1][2] * a[2][1] * a[3][3] - a[0][1] * a[1][0] * a[2][2] * a[3][3] + a[0][0] * a[1][1] * a[2][2] * a[3][3];
}

int main()
{
	double x[12] = {-0.7, -0.5, -0.3, -0.1, 0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5};
	double y[12] = { 1.58, 1.96, 2.44, 2.91, 3.35, 3.8, 4.31, 4.79, 5.24, 5.72, 6.18, 6.67 };
	double c[7];
	double b[4];
	for (int k = 0; k < 7; k++) // подсчет с
	{
		c[k] = 0;
		for (int i = 0; i < 12; i++)
		{
			c[k] += pow(x[i], k);
		}
	}
	for (int k = 0; k < 4; k++) // подсчет b
	{
		b[k] = 0;
		for (int i = 0; i < 12; i++)
		{
			b[k] += pow(x[i], k) * y[i];
		}
	}
	
	double** m = new double* [4]; // выделение памяти под массив из строчек
	for (int i = 0; i < 4; ++i)
	{
		m[i] = new double[4]; // выделение памяти под строчку 
	}
	m[0][0] = c[0];
	m[0][1] = c[1];
	m[0][2] = c[2];
	m[0][3] = c[3];
	m[1][0] = c[1];
	m[1][1] = c[2];
	m[1][2] = c[3];
	m[1][3] = c[4];
	m[2][0] = c[2];
	m[2][1] = c[3];
	m[2][2] = c[4];
	m[2][3] = c[5];
	m[3][0] = c[3];
	m[3][1] = c[4];
	m[3][2] = c[5];
	m[3][3] = c[6];

	double** m0 = new double* [4];
	for (int i = 0; i < 4; ++i)
	{
		m0[i] = new double[4];
	}
	m0[0][0] = b[0];
	m0[0][1] = c[1];
	m0[0][2] = c[2];
	m0[0][3] = c[3];
	m0[1][0] = b[1];
	m0[1][1] = c[2];
	m0[1][2] = c[3];
	m0[1][3] = c[4];
	m0[2][0] = b[2];
	m0[2][1] = c[3];
	m0[2][2] = c[4];
	m0[2][3] = c[5];
	m0[3][0] = b[3];
	m0[3][1] = c[4];
	m0[3][2] = c[5];
	m0[3][3] = c[6];

	double** m1 = new double* [4];
	for (int i = 0; i < 4; ++i)
	{
		m1[i] = new double[4];
	}
	m1[0][0] = c[0];
	m1[0][1] = b[0];
	m1[0][2] = c[2];
	m1[0][3] = c[3];
	m1[1][0] = c[1];
	m1[1][1] = b[1];
	m1[1][2] = c[3];
	m1[1][3] = c[4];
	m1[2][0] = c[2];
	m1[2][1] = b[2];
	m1[2][2] = c[4];
	m1[2][3] = c[5];
	m1[3][0] = c[3];
	m1[3][1] = b[3];
	m1[3][2] = c[5];
	m1[3][3] = c[6];

	double** m2 = new double* [4];
	for (int i = 0; i < 4; ++i)
	{
		m2[i] = new double[4];
	}
	m2[0][0] = c[0];
	m2[0][1] = c[1];
	m2[0][2] = b[0];
	m2[0][3] = c[3];
	m2[1][0] = c[1];
	m2[1][1] = c[2];
	m2[1][2] = b[1];
	m2[1][3] = c[4];
	m2[2][0] = c[2];
	m2[2][1] = c[3];
	m2[2][2] = b[2];
	m2[2][3] = c[5];
	m2[3][0] = c[3];
	m2[3][1] = c[4];
	m2[3][2] = b[3];
	m2[3][3] = c[6];

	double** m3 = new double* [4];
	for (int i = 0; i < 4; ++i)
	{
		m3[i] = new double[4];
	}
	m3[0][0] = c[0];
	m3[0][1] = c[1];
	m3[0][2] = c[2];
	m3[0][3] = b[0];
	m3[1][0] = c[1];
	m3[1][1] = c[2];
	m3[1][2] = c[3];
	m3[1][3] = b[1];
	m3[2][0] = c[2];
	m3[2][1] = c[3];
	m3[2][2] = c[4];
	m3[2][3] = b[2];
	m3[3][0] = c[3];
	m3[3][1] = c[4];
	m3[3][2] = c[5];
	m3[3][3] = b[3];

	double a[4];
	a[0] = det(m0) / det(m);
	a[1] = det(m1) / det(m);
	a[2] = det(m2) / det(m);
	a[3] = det(m3) / det(m);

	double delta = 0;
	for (int i = 0; i < 12; ++i) // подсчет погрешности
	{
		double temp =  
			y[i] - (a[3] * pow(x[i], 3) + a[2] * pow(x[i], 2) + a[1] * x[i] + a[0]);
		delta += temp * temp;
	}
	delta = sqrt(1.0 / 12.0 * delta);

	cout << "a_0 = " << a[0] << endl << "a_1 = " << a[1] << endl;
	cout << "a_2 = " << a[2] << endl << "a_3 = " << a[3] << endl;
	cout << "delta = " << delta;

	for (int i = 0; i < 4; ++i) // очищение памяти выделенных под строчки
	{
		delete[] m[i];
		delete[] m0[i];
		delete[] m1[i];
		delete[] m2[i];
		delete[] m3[i];
	}

	delete[] m; // очищение памяти выделенных под массивы из строчек
	delete[] m0;
	delete[] m1;
	delete[] m2;
	delete[] m3;
	
	return 0;
}